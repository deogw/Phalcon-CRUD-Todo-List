<?php

namespace Application\Controllers;

use Application\Models\Todo;
use Phalcon\Mvc\View;
use Phalcon\Http\Response;
use Carbon\Carbon;

class TodolistController extends ControllerBase
{
    public function beforeExecuteRoute($dispatcher)
    {

        parent::beforeExecuteRoute($dispatcher); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        $todo = Todo::find([
            'order' => 'created_at desc'
        ]);

        $this->view->todos = $todo->toArray();
        $this->view->setRenderLevel(View::LEVEL_ACTION_VIEW);
    }


    public function saveAction()
    {
        $this->view->disable();
        $request = $this->request->getJsonRawBody();
        $newTodo = $request->todo;

        $todo = new Todo();
        $todo->setContent($newTodo);
        $todo->setCretedAt(Carbon::now());


        $response = New Response();
        $data = [
            'success' => true,
            'code' => 200,
        ];

        if ($this->request->isPost()) {
            if ($todo->create()) {
                $data['id'] = $todo->getId();
                $data['message'] = 'New todo created!';
            } else {
                $data['success'] = false;
                $data['message'] = 'Error creating new todo!';
            }
        }

        $response->setJsonContent($data);
        return $response->send();
    }

    public function showTodoAction()
    {
        $this->view->disable();
        $todo = Todo::find([
            'order' => 'created_at'
        ]);

        $response = New Response();
        $data = [
            'success' => true,
            'code' => 200,
            'data' => $todo->toArray()
        ];

        $response->setJsonContent($data);
        return $response->send();
    }

    public function updateAction()
    {
        $this->view->disable();
        $todoID = $this->request->getPut('pk');
        $todoContent = $this->request->getPut('value', 'string');
        $conditions = ['id' => $todoID];

        $response = New Response();
        $data = [
            'success' => true,
            'code' => 200,
        ];

        if ($this->request->isPut()) {
            $todo = Todo::findFirst([
                'conditions' => 'id=:id:',
                'bind' => $conditions,
            ]);


            $todo->update([
                'content' => $todoContent
            ]);

            if ($todo->save()) {
                $data['message'] = 'Update success!';
            } else {
                $data['success'] = false;
                $data['message'] = 'Error update data!';
            }
        }

        $response->setJsonContent($data);
        return $response->send();
    }

    public function deleteAction()
    {
        $request = $this->request->getJsonRawBody();
        $todoID = $request->id;
        $conditions = ['id' => $todoID];
        $response = New Response();

        $data = [
            'success' => false,
            'code' => 200,
        ];

        $todo = Todo::findFirst([
            'conditions' => 'id=:id:',
            'bind' => $conditions,
        ]);

        if ($todo) {
            if ($todo->delete()) {
                $data['success'] = true;
                $data['message'] = 'Delete success!';
            } else {
                $data['message'] = 'Error delete data!';
            }
        } else {
            $data['message'] = 'Todo data not found!';
        }

        $response->setJsonContent($data);
        return $response->send();

    }
}

